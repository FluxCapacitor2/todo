type ApiToken {
  generatedAt: DateTime!
  id: ID!
}

type Collaborator {
  id: ID!
  project: Project!
  role: Role!
  user: User!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Invitation {
  from: User!
  id: ID!
  project: Project!
  to: User!
}

type Label {
  color: String!
  id: ID!
  name: String!
}

type Mutation {
  acceptInvitation(id: String): Invitation!
  addNotificationToken(token: String, userAgent: String): NotificationToken!
  addTimePreset(time: Int): [TimePreset!]!
  createNewProject(name: String): Project!
  createReminder(taskId: Int, time: DateTime): Reminder!
  createSection(projectId: String): Section!
  createSubTask(
    description: String
    dueDate: DateTime
    name: String
    parentTaskId: Int
  ): Task!
  createTask(
    description: String
    dueDate: DateTime
    name: String
    sectionId: Int
  ): Task!
  deleteProject(id: String): Project!
  deleteReminder(id: Int): Reminder!
  deleteSection(id: Int): Section!
  deleteTask(id: Int): Task!
  inviteCollaborator(email: String, projectId: String): Invitation!
  rejectInvitation(id: String): Invitation!
  removeCollaborator(id: String, projectId: String): Project!
  removeNotificationToken(token: String): NotificationToken!
  removeTimePreset(id: Int): [TimePreset!]!
  rerollApiToken(id: String): ApiToken!
  updateProject(archived: Boolean, id: String, name: String): Project!
  updateSection(archived: Boolean, id: Int, name: String): Section!
  updateTask(id: Int): Task!
}

type NotificationToken {
  id: ID!
  token: String!
  userAgent: String!
}

type Project {
  archived: Boolean!
  collaborators: [Collaborator!]!
  createdAt: DateTime!
  id: ID!
  invitations: [Invitation!]!
  name: String!
  owner: User!
  ownerId: String!
  sections(archived: Boolean = false): [Section!]!
  task(id: Int): Task!
}

type Query {
  me: User
  ok: Boolean!
}

type Reminder {
  id: ID!
  task: Task!
  taskId: Int!
  time: DateTime!
}

enum Role {
  EDITOR
  VIEWER
}

type Section {
  archived: Boolean!
  createdAt: DateTime!
  id: ID!
  name: String!
  project: Project!
  projectId: String!
  tasks: [Task!]!
}

type Task {
  completed: Boolean!
  createdAt: DateTime!
  description: String!
  dueDate: DateTime
  id: ID!
  labels: [Label!]!
  name: String!
  owner: User!
  ownerId: String!
  parentTask: Task
  parentTaskId: Int
  priority: Int!
  project: Project!
  projectId: String!
  reminders: [Reminder!]!
  section: Section!
  sectionId: Int
  startDate: DateTime
  subTasks: [Task!]!
  subtaskCounts: String!
  updatedAt: DateTime!
}

type TimePreset {
  id: ID!
  time: Int!
  userId: String
}

type User {
  apiToken: ApiToken!
  apiTokens: [ApiToken!]!
  email: String
  id: ID!
  image: String
  incomingInvitations: [Invitation!]!
  name: String
  notificationTokens: [NotificationToken!]!
  outgoingInvitations: [Invitation!]!
  project(id: String): Project!
  projects(archived: Boolean = false): [Project!]!
  tasks(completed: Boolean = false, first: Int = 20, skip: Int = 0): [Task!]!
  timePresets: [TimePreset!]!
}
