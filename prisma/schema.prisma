generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider    = "prisma-pothos-types"
  prismaUtils = true
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String              @id @default(cuid())
  name                String?
  email               String?             @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime            @default(now())
  accounts            Account[]
  projects            Project[]
  sessions            Session[]
  tasks               Task[]
  notificationTokens  NotificationToken[]
  outgoingInvitations Invitation[]        @relation("from")
  incomingInvitations Invitation[]        @relation("to")
  apiTokens           ApiToken[]
  Collaborator        Collaborator[]
  timePresets         TimePreset[]
  reminders           Reminder[]
}

model TimePreset {
  id        Int      @id @default(autoincrement())
  time      Int
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([userId])
}

model ApiToken {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  generatedAt DateTime @default(now())

  @@index([userId])
}

model Invitation {
  id         String   @id @default(cuid())
  from       User     @relation("from", fields: [senderId], references: [id])
  to         User     @relation("to", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String

  @@index([senderId])
  @@index([receiverId])
  @@index([projectId])
}

model Collaborator {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  role      Role
  joinedAt  DateTime @default(now())

  @@index([userId])
  @@index([projectId])
}

enum Role {
  EDITOR
  VIEWER
}

model NotificationToken {
  id          String   @id @default(cuid())
  token       String   @unique
  generatedAt DateTime @default(now())
  userAgent   String
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String         @id @default(cuid())
  name          String
  archived      Boolean        @default(false)
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators Collaborator[]
  sections      Section[]
  invitations   Invitation[]
  Task          Task[]
  createdAt     DateTime       @default(now())

  @@index([ownerId])
}

model Section {
  id        Int      @id @default(autoincrement())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([archived])
}

model Task {
  id           Int        @id @default(autoincrement())
  name         String
  description  String     @db.Text
  priority     Int        @default(1)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  completed    Boolean    @default(false)
  startDate    DateTime?
  dueDate      DateTime?
  sectionId    Int?
  parentTaskId Int?
  ownerId      String
  owner        User       @relation(fields: [ownerId], references: [id])
  parentTask   Task?      @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subTasks     Task[]     @relation("SubTasks")
  section      Section?   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  labels       Label[]    @relation("LabelToTask")
  reminders    Reminder[]
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String

  @@index([projectId])
  @@index([ownerId])
  @@index([sectionId])
  @@index([parentTaskId])
  @@index([completed])
}

model Reminder {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  Task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  projectId String
  time      DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([taskId])
  @@index([taskId, userId])
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  tasks     Task[]   @relation("LabelToTask")
}
